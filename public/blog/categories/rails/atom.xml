<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | John Keith]]></title>
  <link href="http://johnk.herokuapp.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://johnk.herokuapp.com/"/>
  <updated>2014-04-02T18:32:38-04:00</updated>
  <id>http://johnk.herokuapp.com/</id>
  <author>
    <name><![CDATA[John Keith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trying to Remember the Small Stuff]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/19/trying-to-remember-the-small-stuff/"/>
    <updated>2014-03-19T17:47:29-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/19/trying-to-remember-the-small-stuff</id>
    <content type="html"><![CDATA[<p>Refactoring is really fun, especially in those moments when you have an “Aha!” flash and one of those little details clicks into place. I had that today with method I wrote for changing the sorting on a table in a Rails view. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">sortable</span>(column, title = <span class="predefined-constant">nil</span>)
  title ||= column.titleize
  direction = (column == sort_column &amp;&amp; sort_direction == <span class="string"><span class="delimiter">&quot;</span><span class="content">asc</span><span class="delimiter">&quot;</span></span>) ? <span class="string"><span class="delimiter">&quot;</span><span class="content">desc</span><span class="delimiter">&quot;</span></span> : <span class="string"><span class="delimiter">&quot;</span><span class="content">asc</span><span class="delimiter">&quot;</span></span>
  font_awesome_direction = direction == <span class="string"><span class="delimiter">&quot;</span><span class="content">asc</span><span class="delimiter">&quot;</span></span> ? <span class="string"><span class="delimiter">&quot;</span><span class="content">up</span><span class="delimiter">&quot;</span></span> : <span class="string"><span class="delimiter">&quot;</span><span class="content">down</span><span class="delimiter">&quot;</span></span>
  css_class = column == sort_column ? <span class="string"><span class="delimiter">&quot;</span><span class="content">fa-caret-</span><span class="inline"><span class="inline-delimiter">#{</span>font_awesome_direction<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span> : <span class="predefined-constant">nil</span>
  link_to title, {<span class="symbol">:sort</span> =&gt; column, <span class="symbol">:direction</span> =&gt; direction}, {<span class="key">class</span>: css_class}
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>That sortable method was placed in my application_helper.rb. It works with these two methods from my view controller. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">sort_direction</span>
  <span class="string"><span class="delimiter">%w[</span><span class="content">asc desc</span><span class="delimiter">]</span></span>.include?(params[<span class="symbol">:direction</span>]) ?  params[<span class="symbol">:direction</span>] : <span class="string"><span class="delimiter">&quot;</span><span class="content">asc</span><span class="delimiter">&quot;</span></span>
<span class="keyword">end</span>

<span class="keyword">def</span> <span class="function">sort_column</span>
  <span class="constant">Expense</span>.column_names.include?(params[<span class="symbol">:sort</span>]) ? params[<span class="symbol">:sort</span>] : <span class="string"><span class="delimiter">&quot;</span><span class="content">date</span><span class="delimiter">&quot;</span></span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>And all of these are put into place with the index method in that same view controller. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">index</span>
  <span class="instance-variable">@expenses</span> = <span class="constant">Expense</span>.order(sort_column + <span class="string"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span> + sort_direction).paginate(<span class="key">page</span>: params[<span class="symbol">:page</span>])
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>Initially, what I’d written wasn’t terrible: it worked in the browser, my columns resorted themselves on prompting, and a nice little caret was provided as feedback and a guide post for the user. That said, I was irked by the way the caret was smushed right up against the text and the way that adding the caret threw off the font sizing and styling I had going at the top of my table. </p>

<p>So, I took a step back and tried to determine out if it was possible to embed HTML inside of a link_to in Rails. A couple minutes later, I had figured out it was perfectly acceptable and learned a little bit about the nifty #html_safe method that Rails provides. This led me to a rewritten last line that I think provides a much more pleasing output. </p>

<div><div class="CodeRay">
  <div class="code"><pre>link_to <span class="string"><span class="delimiter">&quot;</span><span class="content">&lt;i class='fa </span><span class="inline"><span class="inline-delimiter">#{</span>css_class<span class="inline-delimiter">}</span></span><span class="content">'&gt;&lt;/i&gt; </span><span class="delimiter">&quot;</span></span>.html_safe+title, {<span class="symbol">:sort</span> =&gt; column, <span class="symbol">:direction</span> =&gt; direction}
</pre></div>
</div>
</div>

<p>It was also great to have one of those moments when all that reading comes in handy. I couldn’t get the icons to appear the first time I fired up the page, because I had wrapped my icon HTML in single quotes instead of double. Using double quotes on the outside and then single on the inside allows Ruby to interpolate the css_class variable. Nothing fancy, but still a good learning experience that will hopefully keep me more consistent with my use of quotes. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamically Control Button Labels With a Helper Method]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/14/dynamically-control-button-labels-with-a-helper-method/"/>
    <updated>2014-03-14T19:20:08-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/14/dynamically-control-button-labels-with-a-helper-method</id>
    <content type="html"><![CDATA[<p><em>Reader beware: I’m learning Rails right now. In no way, shape or form should this post or any posts here for at least the next month and a half be taken as gospel truth of how to do things right in Rails. They probably are way, way out in right field.</em></p>

<p>Okay, say you have a view and in that view you have a beautiful button. If you want to assign a name to that button dynamically, say based on the truthiness of some variable, here’s an easy way to do it. </p>

<p>Open up the _helper.rb file for your model. In your _helper file, write a method that will provide you two pieces of text, depending on a certain condition.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">sign_up_btn</span>
  <span class="keyword">if</span> <span class="constant">User</span>.sign_up_allowed == <span class="predefined-constant">true</span>
    <span class="string"><span class="delimiter">&quot;</span><span class="content">Prevent new account creation</span><span class="delimiter">&quot;</span></span>
  <span class="keyword">else</span>
    <span class="string"><span class="delimiter">&quot;</span><span class="content">Allow new account creation</span><span class="delimiter">&quot;</span></span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>Or, if you want to be fancy, try this refactored-while-in-the-midst-of-blogging-version. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">sign_up_btn</span>
  <span class="constant">User</span>.sign_up_allowed ? <span class="string"><span class="delimiter">&quot;</span><span class="content">Prevent new account creation</span><span class="delimiter">&quot;</span></span> : <span class="string"><span class="delimiter">&quot;</span><span class="content">Allow new account creation</span><span class="delimiter">&quot;</span></span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>Then, back over in your view file, add this bit to create the button and assign it a title based on the results of the method above. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="inline"><span class="inline-delimiter">&lt;%=</span> button_to <span class="key">action</span>: <span class="string"><span class="delimiter">&quot;</span><span class="content">disallow_sign_up</span><span class="delimiter">&quot;</span></span> <span class="keyword">do</span> <span class="inline-delimiter">%&gt;</span></span><span class="inline"><span class="inline-delimiter">&lt;%=</span> <span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">#{</span>sign_up_btn<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span> <span class="inline-delimiter">%&gt;</span></span><span class="inline"><span class="inline-delimiter">&lt;%</span> <span class="keyword">end</span> <span class="inline-delimiter">%&gt;</span></span>
</pre></div>
</div>
</div>

<p>(Just so you get a fuller picture, here’s my disallow_sign_up method from my users_controller. I wrote it as a way for an admin to turn off access to the sign up page in the expense tracking app I’m working on.)</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">disallow_sign_up</span>
  <span class="constant">User</span>.sign_up_allowed ? <span class="constant">User</span>.sign_up_allowed = <span class="predefined-constant">false</span> : <span class="constant">User</span>.sign_up_allowed = <span class="predefined-constant">true</span>
  redirect_to users_index_path
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>I have a serious fixation on the ternary operator, if you haven’t noticed. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple File Uploads to Rails With Dragonfly]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/11/simple-file-uploads-to-rails-with-dragonfly/"/>
    <updated>2014-03-11T17:42:53-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/11/simple-file-uploads-to-rails-with-dragonfly</id>
    <content type="html"><![CDATA[<p>Gems are amazing. As a rookie developer, it is incredible to come into the Ruby/Rails community and discover the wealth of code that is available out there, packaged and ready to be used. I’d encountered and enjoyed open source software before, but it was not until I started writing code that I really came to appreciate what the concept means.</p>

<p>Take for instance file uploading with Rails. You can perform basic uploads using what Rails offers natively or you can choose from a multitude of gems (Paperclip, Carrierwave, Dragonfly, the <a href="https://www.ruby-toolbox.com/categories/rails_file_uploads">list goes on</a>) that add more advanced methods of uploading and storing files in your Rails app. </p>

<p>For the expense tracker I am currently working on, I selected <a href="https://github.com/markevans/dragonfly">Dragonfly</a>. I’ll admit, I tried Paperclip first and I was unable to make it function correctly. My lack of success with Paperclip, however, was only half the reason I ended up with Dragonfly. </p>

<p>As I was envisioning document uploads in my app, I wanted the document (a receipt or invoice of a purchase) to become part of the Expenses table that I had already set up with a multitude of fields. With Paperclip, as far as I understood from the tutorials provided, it seemed like the documents would be set up as a separate model in the database, then associated with my current Expenses model. I can see advantages to the Paperclip approach (making all the documents easily accessible in one section of the database), but I wanted keep the relationships in this app as simple as possible, if only for my own sanity.</p>

<p>The great part about Dragonfly is it makes adding a :document column to your current model incredibly easy. The instructions below were what I did to install and integrate Dragonfly to upload documents when creating a new record in my Expense model. </p>

<p>First, I added Dragonfly to my gemfile and ran bundler.</p>

<div><div class="CodeRay">
  <div class="code"><pre>gem <span class="string"><span class="delimiter">'</span><span class="content">dragonfly</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">~&gt;1.0.3</span><span class="delimiter">&quot;</span></span>
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre>$ bundle install
</pre></div>
</div>
</div>

<p>Then, in my app/models/expense.rb, I added an accessor for my document.</p>

<div><div class="CodeRay">
  <div class="code"><pre>dragonfly_accessor <span class="symbol">:document</span>
</pre></div>
</div>
</div>

<p>Back at the command line, I setup a migration to add a document column to my expenses model. </p>

<div><div class="CodeRay">
  <div class="code"><pre>$ Rails generate migration AddDocumentToExpenses
</pre></div>
</div>
</div>

<p>Inside the migration document, I added two columns, one for the :document_uid and :document_name, per the <a href="http://markevans.github.io/dragonfly/">Dragonfly wiki</a>.</p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">class</span> <span class="class">AddDocumentToExpenses</span> &lt; <span class="constant">ActiveRecord</span>::<span class="constant">Migration</span>
  <span class="keyword">def</span> <span class="function">change</span>
    add_column <span class="symbol">:expenses</span>, <span class="symbol">:document_uid</span>, <span class="symbol">:string</span>
    add_column <span class="symbol">:expenses</span>, <span class="symbol">:document_name</span>, <span class="symbol">:string</span>
  <span class="keyword">end</span>
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>Then came migrating the database.</p>

<div><div class="CodeRay">
  <div class="code"><pre>rake db:migrate
</pre></div>
</div>
</div>

<p>Next was altering my app/views/expenses/_form.html.erb to include a field for file uploads. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="tag">&lt;div</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">field</span><span class="delimiter">&quot;</span></span><span class="tag">&gt;</span>
    <span class="inline"><span class="inline-delimiter">&lt;%=</span> f.label <span class="symbol">:document</span> <span class="inline-delimiter">%&gt;</span></span><span class="tag">&lt;br&gt;</span>
    <span class="inline"><span class="inline-delimiter">&lt;%=</span> f.file_field <span class="symbol">:document</span> <span class="inline-delimiter">%&gt;</span></span>
<span class="tag">&lt;/div&gt;</span>
</pre></div>
</div>
</div>
<p>Then, inside my app/controllers/expenses_controller.rb, I added :document to the list of permitted parameters near the bottom. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="keyword">def</span> <span class="function">expense_params</span>
    params.require(<span class="symbol">:expense</span>).permit(<span class="symbol">:user_id</span>, <span class="symbol">:date</span>, <span class="symbol">:reseller</span>, <span class="symbol">:item_or_service</span>, <span class="symbol">:payment_form</span>, <span class="symbol">:charged_to</span>, <span class="symbol">:cost</span>, <span class="symbol">:amount_from_budget</span>, <span class="symbol">:notes</span>, <span class="symbol">:document</span>)
<span class="keyword">end</span>
</pre></div>
</div>
</div>

<p>With the next step, I was unsure if this was the correct course to take. I was worried about my files being uploaded to the public folder, as I assumed anything in that area would be easily accessible from the outside. I created a directory in the root of my app called secure_storage, though I have no idea if that name is a complete misnomer. Then, I opened the config/initializers/dragonfly.rb and changed the default location for where files would be stored. Again, hopefully this will put them in a better location than the public directory, but I am not a hundred precent sure. </p>

<div><div class="CodeRay">
  <div class="code"><pre>datastore <span class="symbol">:file</span>,
  <span class="key">root_path</span>: <span class="constant">Rails</span>.root.join(<span class="string"><span class="delimiter">'</span><span class="content">secure_storage/system/dragonfly</span><span class="delimiter">'</span></span>, <span class="constant">Rails</span>.env),
  <span class="key">server_root</span>: <span class="constant">Rails</span>.root.join(<span class="string"><span class="delimiter">'</span><span class="content">secure_storage</span><span class="delimiter">'</span></span>)
</pre></div>
</div>
</div>

<p>Finally, I added a file link (with a condition to make sure it didn’t appear if no file was present with the record) on the app/views/expenses/show.html.erb. </p>

<div><div class="CodeRay">
  <div class="code"><pre><span class="inline"><span class="inline-delimiter">&lt;%</span> <span class="keyword">if</span> <span class="instance-variable">@expense</span>.document <span class="inline-delimiter">%&gt;</span></span>
<span class="tag">&lt;p&gt;</span>
  <span class="tag">&lt;strong&gt;</span>Document:<span class="tag">&lt;/strong&gt;</span>
  <span class="inline"><span class="inline-delimiter">&lt;%=</span> link_to <span class="string"><span class="delimiter">&quot;</span><span class="content">File</span><span class="delimiter">&quot;</span></span>, root_url.chop + <span class="instance-variable">@expense</span>.document.url <span class="inline-delimiter">%&gt;</span></span>
<span class="tag">&lt;/p&gt;</span>
<span class="inline"><span class="inline-delimiter">&lt;%</span> <span class="keyword">end</span> <span class="inline-delimiter">%&gt;</span></span>
</pre></div>
</div>
</div>

<p>That, I believe, was all! You should now have a working file upload function, one that even lets you download the file too! If you try this and have trouble, let me know in the comments below.</p>
]]></content>
  </entry>
  
</feed>
