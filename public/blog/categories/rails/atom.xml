<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | John Keith]]></title>
  <link href="http://johnk.herokuapp.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://johnk.herokuapp.com/"/>
  <updated>2014-04-02T21:18:43-04:00</updated>
  <id>http://johnk.herokuapp.com/</id>
  <author>
    <name><![CDATA[John Keith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trying to Remember the Small Stuff]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/19/trying-to-remember-the-small-stuff/"/>
    <updated>2014-03-19T17:47:29-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/19/trying-to-remember-the-small-stuff</id>
    <content type="html"><![CDATA[<p>Refactoring is really fun, especially in those moments when you have an &ldquo;Aha!&rdquo; flash and one of those little details clicks into place. I had that today with method I wrote for changing the sorting on a table in a Rails view.</p>

<p><code>ruby
def sortable(column, title = nil)
  title ||= column.titleize
  direction = (column == sort_column &amp;&amp; sort_direction == "asc") ? "desc" : "asc"
  font_awesome_direction = direction == "asc" ? "up" : "down"
  css_class = column == sort_column ? "fa-caret-#{font_awesome_direction}" : nil
  link_to title, {:sort =&gt; column, :direction =&gt; direction}, {class: css_class}
end
</code></p>

<p>That sortable method was placed in my application_helper.rb. It works with these two methods from my view controller.</p>

<p>``` ruby
def sort_direction
  %w[asc desc].include?(params[:direction]) ?  params[:direction] : &ldquo;asc&rdquo;
end</p>

<p>def sort_column
  Expense.column_names.include?(params[:sort]) ? params[:sort] : &ldquo;date&rdquo;
end
```</p>

<p>And all of these are put into place with the index method in that same view controller.</p>

<p><code>ruby
def index
  @expenses = Expense.order(sort_column + ' ' + sort_direction).paginate(page: params[:page])
end
</code></p>

<p>Initially, what I&rsquo;d written wasn&rsquo;t terrible: it worked in the browser, my columns resorted themselves on prompting, and a nice little caret was provided as feedback and a guide post for the user. That said, I was irked by the way the caret was smushed right up against the text and the way that adding the caret threw off the font sizing and styling I had going at the top of my table.</p>

<p>So, I took a step back and tried to determine out if it was possible to embed HTML inside of a link_to in Rails. A couple minutes later, I had figured out it was perfectly acceptable and learned a little bit about the nifty #html_safe method that Rails provides. This led me to a rewritten last line that I think provides a much more pleasing output.</p>

<p><code>ruby
link_to "&lt;i class='fa #{css_class}'&gt;&lt;/i&gt; ".html_safe+title, {:sort =&gt; column, :direction =&gt; direction}
</code></p>

<p>It was also great to have one of those moments when all that reading comes in handy. I couldn&rsquo;t get the icons to appear the first time I fired up the page, because I had wrapped my icon HTML in single quotes instead of double. Using double quotes on the outside and then single on the inside allows Ruby to interpolate the css_class variable. Nothing fancy, but still a good learning experience that will hopefully keep me more consistent with my use of quotes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamically Control Button Labels With a Helper Method]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/14/dynamically-control-button-labels-with-a-helper-method/"/>
    <updated>2014-03-14T19:20:08-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/14/dynamically-control-button-labels-with-a-helper-method</id>
    <content type="html"><![CDATA[<p><em>Reader beware: I&rsquo;m learning Rails right now. In no way, shape or form should this post or any posts here for at least the next month and a half be taken as gospel truth of how to do things right in Rails. They probably are way, way out in right field.</em></p>

<p>Okay, say you have a view and in that view you have a beautiful button. If you want to assign a name to that button dynamically, say based on the truthiness of some variable, here&rsquo;s an easy way to do it.</p>

<p>Open up the <em>helper.rb file for your model. In your </em>helper file, write a method that will provide you two pieces of text, depending on a certain condition.</p>

<p>``` ruby
def sign_up_btn
  if User.sign_up_allowed == true</p>

<pre><code>"Prevent new account creation"
</code></pre>

<p>  else</p>

<pre><code>"Allow new account creation"
</code></pre>

<p>  end
end
```</p>

<p>Or, if you want to be fancy, try this refactored-while-in-the-midst-of-blogging-version.</p>

<p><code>ruby
def sign_up_btn
  User.sign_up_allowed ? "Prevent new account creation" : "Allow new account creation"
end
</code></p>

<p>Then, back over in your view file, add this bit to create the button and assign it a title based on the results of the method above.</p>

<p><code>erb
&lt;%= button_to action: "disallow_sign_up" do %&gt;&lt;%= "#{sign_up_btn}" %&gt;&lt;% end %&gt;
</code></p>

<p>(Just so you get a fuller picture, here&rsquo;s my disallow_sign_up method from my users_controller. I wrote it as a way for an admin to turn off access to the sign up page in the expense tracking app I&rsquo;m working on.)</p>

<p><code>ruby
def disallow_sign_up
  User.sign_up_allowed ? User.sign_up_allowed = false : User.sign_up_allowed = true
  redirect_to users_index_path
end
</code></p>

<p>I have a serious fixation on the ternary operator, if you haven&rsquo;t noticed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple File Uploads to Rails With Dragonfly]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/11/simple-file-uploads-to-rails-with-dragonfly/"/>
    <updated>2014-03-11T17:42:53-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/11/simple-file-uploads-to-rails-with-dragonfly</id>
    <content type="html"><![CDATA[<p>Gems are amazing. As a rookie developer, it is incredible to come into the Ruby/Rails community and discover the wealth of code that is available out there, packaged and ready to be used. I&rsquo;d encountered and enjoyed open source software before, but it was not until I started writing code that I really came to appreciate what the concept means.</p>

<p>Take for instance file uploading with Rails. You can perform basic uploads using what Rails offers natively or you can choose from a multitude of gems (Paperclip, Carrierwave, Dragonfly, the <a href="https://www.ruby-toolbox.com/categories/rails_file_uploads">list goes on</a>) that add more advanced methods of uploading and storing files in your Rails app.</p>

<p>For the expense tracker I am currently working on, I selected <a href="https://github.com/markevans/dragonfly">Dragonfly</a>. I&rsquo;ll admit, I tried Paperclip first and I was unable to make it function correctly. My lack of success with Paperclip, however, was only half the reason I ended up with Dragonfly.</p>

<p>As I was envisioning document uploads in my app, I wanted the document (a receipt or invoice of a purchase) to become part of the Expenses table that I had already set up with a multitude of fields. With Paperclip, as far as I understood from the tutorials provided, it seemed like the documents would be set up as a separate model in the database, then associated with my current Expenses model. I can see advantages to the Paperclip approach (making all the documents easily accessible in one section of the database), but I wanted keep the relationships in this app as simple as possible, if only for my own sanity.</p>

<p>The great part about Dragonfly is it makes adding a :document column to your current model incredibly easy. The instructions below were what I did to install and integrate Dragonfly to upload documents when creating a new record in my Expense model.</p>

<p>First, I added Dragonfly to my gemfile and ran bundler.</p>

<p><code>ruby
gem 'dragonfly', "~&gt;1.0.3"
</code></p>

<p><code>
$ bundle install
</code></p>

<p>Then, in my app/models/expense.rb, I added an accessor for my document.</p>

<p><code>ruby
dragonfly_accessor :document
</code></p>

<p>Back at the command line, I setup a migration to add a document column to my expenses model.</p>

<p><code>
$ Rails generate migration AddDocumentToExpenses
</code></p>

<p>Inside the migration document, I added two columns, one for the :document_uid and :document_name, per the <a href="http://markevans.github.io/dragonfly/">Dragonfly wiki</a>.</p>

<p>``` ruby
class AddDocumentToExpenses &lt; ActiveRecord::Migration
  def change</p>

<pre><code>add_column :expenses, :document_uid, :string
add_column :expenses, :document_name, :string
</code></pre>

<p>  end
end
```</p>

<p>Then came migrating the database.</p>

<p><code>
rake db:migrate
</code></p>

<p>Next was altering my app/views/expenses/_form.html.erb to include a field for file uploads.</p>

<p>``` erb</p>

<div class="field">
    <%= f.label :document %><br>
    <%= f.file_field :document %>
</div>


<p>```
Then, inside my app/controllers/expenses_controller.rb, I added :document to the list of permitted parameters near the bottom.</p>

<p>``` ruby
def expense_params</p>

<pre><code>params.require(:expense).permit(:user_id, :date, :reseller, :item_or_service, :payment_form, :charged_to, :cost, :amount_from_budget, :notes, :document)
</code></pre>

<p>end
```</p>

<p>With the next step, I was unsure if this was the correct course to take. I was worried about my files being uploaded to the public folder, as I assumed anything in that area would be easily accessible from the outside. I created a directory in the root of my app called secure_storage, though I have no idea if that name is a complete misnomer. Then, I opened the config/initializers/dragonfly.rb and changed the default location for where files would be stored. Again, hopefully this will put them in a better location than the public directory, but I am not a hundred precent sure.</p>

<p><code>ruby
datastore :file,
  root_path: Rails.root.join('secure_storage/system/dragonfly', Rails.env),
  server_root: Rails.root.join('secure_storage')
</code></p>

<p>Finally, I added a file link (with a condition to make sure it didn&rsquo;t appear if no file was present with the record) on the app/views/expenses/show.html.erb.</p>

<p>``` erb
&lt;% if @expense.document %></p>

<p><p>
  <strong>Document:</strong>
  &lt;%= link_to &ldquo;File&rdquo;, root_url.chop + @expense.document.url %>
</p>
&lt;% end %>
```</p>

<p>That, I believe, was all! You should now have a working file upload function, one that even lets you download the file too! If you try this and have trouble, let me know in the comments below.</p>
]]></content>
  </entry>
  
</feed>
