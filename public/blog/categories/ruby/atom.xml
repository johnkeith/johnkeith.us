<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | John Keith]]></title>
  <link href="http://johnk.herokuapp.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://johnk.herokuapp.com/"/>
  <updated>2014-05-21T09:57:17-04:00</updated>
  <id>http://johnk.herokuapp.com/</id>
  <author>
    <name><![CDATA[John Keith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Launch Academy Week 1 Reflections]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/05/16/launch-academy-week-1-reflections/"/>
    <updated>2014-05-16T20:41:21-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/05/16/launch-academy-week-1-reflections</id>
    <content type="html"><![CDATA[<p>Summing up week one of Launch Academy is tough: it&rsquo;s been a whirlwind of information and challenges. Here&rsquo;s what I do know: I could not be more excited to be here and on my way to becoming a software developer.</p>

<p>This first week really affirmed my desire to become a developer. Coming into Launch Academy, I was unsure of what life would be like working in web development professionally &ndash; I knew I&rsquo;d enjoyed tinkering in the past, but I didn&rsquo;t know what would it be like to be writing software everyday. At the end of this first week, I feel confident that I&rsquo;m going to enjoy this new career tremendously.</p>

<p>That&rsquo;s not to say this week was without it&rsquo;s travails. The Launch Academy instructors stressed from day one that software development is not just about code: great software is the product of strong communication. This is definitely been a big shift in thinking for me as up until now I&rsquo;ve essentially been flying solo when coding. It is certainly taken some adjustment and I feel one of the most important things I&rsquo;ve been working on this week is learning how to collaborate and develop solutions with other people.</p>

<p>On the technical side, the past five days been a huge boost for my abilities in Ruby. As we take on bigger and bigger problems, I&rsquo;m really enjoying figuring out how to design programs and implement them as concisely as possible. Towards the end of the week, after seeing it mentioned in one of our Ruby challenges, I started playing around with the Benchmark module and it has been very interesting to look at how different ways of performing operations can be more efficient than others. I was surprised that the Fibonacci sequence methods below resulted in calculation times that were roughly the same.</p>

<p>```ruby</p>

<p>require &lsquo;benchmark&rsquo;</p>

<p>time = Benchmark.realtime do
  def fibonacci(nth)</p>

<pre><code>array_o_fibs = []
if nth == 1 || nth == 2
  return 1
else
  array_o_fibs &lt;&lt; 1; array_o_fibs &lt;&lt; 1
  until array_o_fibs.length == nth
    array_o_fibs &lt;&lt; array_o_fibs[-1] + array_o_fibs[-2]
  end
end
array_o_fibs[-1]
</code></pre>

<p>  end</p>

<p>  fibonacci(100)
end</p>

<p>puts &ldquo;The time elapsed in milliseconds is #{time*1000} with the non-recursive fibonacci method.&rdquo;</p>

<p>time = Benchmark.realtime do</p>

<p>  def other_fibonacci(n)</p>

<pre><code>if n == 1 || n == 2
  1
else
  fibonacci(n - 1) + fibonacci(n - 2)
end
</code></pre>

<p>  end</p>

<p>  other_fibonacci(100)
end
puts &ldquo;The time elapsed in milliseconds is #{time*1000} with the recursive fibonacci method.&rdquo;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Final Prep for Launch Academy]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/04/30/final-prep-for-launch-academy/"/>
    <updated>2014-04-30T18:10:06-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/04/30/final-prep-for-launch-academy</id>
    <content type="html"><![CDATA[<p>The last part of our Launch Academy prep work is a moment of reflection. I feel like I&rsquo;ve come quite far since I started the prework &ndash; especially in terms of my understanding of Git. The Git Immersion and <a href="http://pcottle.github.io/learnGitBranching/">Learn Git Branching</a> were hugely helpful for me. Being able to visualize what is going on with rebases and merges made all the difference. Sandi Metz&rsquo;s book is by far my favorite of the readings and certainly the one I have spent the most time pouring over. Starting to understand the OOP patterns presented in that book has been a big turning point for me when it comes to grasping how entire applications are written and maintained.</p>

<p>In addition to finishing out my prework, I&rsquo;ve been spending a good deal of time on a site a Launch Academy staffer recommended called <a href="http://www.codequizzes.com/">Code Quizzes</a> and this has been a great way to sharpen all the Ruby that I&rsquo;ve been absorbing. Here are a few of the awesome methods and tricks I&rsquo;ve encountered so far from the quiz questions.</p>

<p><em>Question:</em>
<em>a = [1, 2, 3] and b = [&ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;c&rdquo;].  Use these arrays to make [[1, &ldquo;a&rdquo;], [2, &ldquo;b&rdquo;], [3, &ldquo;c&rdquo;]]</em></p>

<p>I really like the #zip method this question introduces. The #zip method allows you to combine two or more arrays with ease. Here&rsquo;s an example of combining three arrays.</p>

<p>``` ruby
a = [&ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;c&rdquo;]
b = %w(1 2 3 4 5)
c = [&ldquo;zip&rdquo;, &ldquo;method&rdquo;]</p>

<p>a.zip(b, c)</p>

<h1>[[&ldquo;a&rdquo;, &ldquo;1&rdquo;, &ldquo;zip&rdquo;], [&ldquo;b&rdquo;, &ldquo;2&rdquo;, &ldquo;method&rdquo;], [&ldquo;c&rdquo;, &ldquo;3&rdquo;, nil]]</h1>

<p>Hash[a.zip(b)]</p>

<h1>{&ldquo;a&rdquo;=>&ldquo;1&rdquo;, &ldquo;b&rdquo;=>&ldquo;2&rdquo;, &ldquo;c&rdquo;=>&ldquo;3&rdquo;}</h1>

<p>```
You can see from the above that zip can be quite flexible and formidable, mashing together arrays or even forming hashes.</p>

<p>The #cycle method is another interesting array operation that came up in questions on Code Quizzes. With #cycle, you can perform a block for a specified amount of times. For example, if you had an array you can use #cycle to print out its contents in order any number of times.</p>

<p>``` ruby
a = [1, 2, 3, 4]</p>

<p>a.cycle(4) { |i| p i }
```</p>

<p>Inject is certainly a method I want to master: it is really amazing how you can pass in a method to inject and let it do the work for you, without having to write a complete block.</p>

<p><code>ruby
[1, 2, 3, 4, 5, 42].inject(:+)
</code></p>

<p>One question that had me a tad <a href="http://www.gullahbible.com/e-GullahNT/Conc/44JHNGUL.htm">bumfumbled</a> involved passing a method as a block and it being considered a Proc.</p>

<p><em>Question:</em>
<em>arr = [&ldquo;a&rdquo;, &ldquo;b&rdquo;].  Capitalize each element of arr with a proc.</em></p>

<p>The answer given was <code>arr.map(&amp;:upcase)</code>, which I am assuming means that you can pass methods as blocks and with some voodoo they turn into Procs.</p>

<p>Further on, there was a great question that begged for a similar solution.</p>

<p><em>Question:</em>
<em>Use a one-liner to find the longest word in the array: arr = %w{what is the longest word in this arrrrrray}</em></p>

<p>The site proposed the method below.</p>

<p><code>ruby
arr.inject { |longest_word, word| word.length &gt; longest_word.length ? word : longest_word}
</code></p>

<p>I think, however, it could be put more succicently with <code>arr.sort_by(&amp;:length).last</code>.</p>

<p>The larger pattern that I&rsquo;m begining to see is that with Ruby there is always another way, or twenty, to solve a problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON and Nested Hashes in Ruby]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/04/01/json-and-nested-hashes-in-ruby/"/>
    <updated>2014-04-01T21:33:09-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/04/01/json-and-nested-hashes-in-ruby</id>
    <content type="html"><![CDATA[<p>JSON is one of the major data formats out there on the web, known for its readability. Personally, I was a little unsure about that readability aspect after pulling up my first JSON document and seeing this mess.</p>

<p><img src="http://gdurl.com/PP1x" alt="Crazy JSON!" /></p>

<p>The first step towards wrapping your head around JSON is to see it printed in a prettier fashion. Head over to <a href="http://www.jsoneditoronline.org">JSON Online Editor</a> and using the &ldquo;Open URL&rdquo; option you can paste the URL to a JSON document and see this format is actually much more presentable than it lets on. (If you need a JSON example to play with while reading this, don&rsquo;t hesitate to use <a href="http://teamtreehouse.com/johnkeith.json">my Treehouse profile</a>, as this provides you with a complex, multidimensional set of data to manipulate).</p>

<p>I decided to start by figuring out how to work with JSON in Ruby, as currently I feel more comfortable with Ruby than Javascript. Luckily, Ruby makes handling JSON from the web easy with a few of its built in libraries and modules.</p>

<p>At the top of your Ruby file (or in IRB if you would rather try this out in the terminal), you will need to require the Net/HTTP library and the JSON module.</p>

<p><code>ruby
require 'net/http'
require 'json'
</code></p>

<p>Net/HTTP allows you to do all types connect to websites within Ruby and do all types of nifty stuff. For instance, the following code will assign our JSON document&rsquo;s contents to the variable response.</p>

<p><code>ruby
response = Net::HTTP.get_response(URI.parse('http://teamtreehouse.com/johnkeith.json'))
</code></p>

<p>The get_response method returns a Net::HTTPResponse object that contains header and body information from the website specified. Since we are are specifying a JSON document, there is no header, but you can check the output of your response object with <code>response.body.inspect</code>.</p>

<p>Now that we have the JSON document retreived from the web, we need to parse it and turn the data into something more easily used by Ruby.</p>

<p><code>ruby
result = JSON.parse(response.body)
</code></p>

<p>(I found it helpful to look at the difference between the raw Net::HTTP response and the parse JSON &ndash; try running <code>puts JSON.pretty_generate(result)</code> and <code>puts response.body</code> to see how the parse method formats the data into a Ruby readable hash.)</p>

<p>Next, we need to access the data within our newly parsed hash of JSON data. You can access Ruby hashes with a similar syntax to the one used for arrays &ndash; start with the hash name, then a key from the hash in brackets.</p>

<p><code>ruby
result["badges"]
result["badges"][0]
result["badges"][0]["name"]
</code></p>

<p>The examples above show you how you can move through a nested hash and access data within different sections of your JSON document. Putting this syntax to use, you can quickly pull out all the URLs for the badge icons from this Treehouse JSON.</p>

<p><code>ruby
result["badges"].each do |item|
  puts item["icon_url"]
end
</code></p>

<p>While I thought it was awesome to be able to drill down to these URLs, I decided I wanted to do something with this data. To round out my exploration of JSON and Ruby, I wrote a small script to grab all of the images located at these URLs and save them to my computer.</p>

<p>``` ruby
require &lsquo;open-uri&rsquo;
result[&ldquo;badges&rdquo;].each do |item|
  open(&ldquo;badge#{item["id&rdquo;]}.png", &ldquo;w+&rdquo;) do |file|</p>

<pre><code>open(item["icon_url"]) do |image|
  file.write(image.read)
end
</code></pre>

<p>  end
end
```</p>

<p>The Open URI module, according to the Ruby docs, allows you &ldquo;to open an http, https, or ftp URL as though it were a file.&rdquo; The code above uses this capability in the <code>open(item["icon_url"] do |image|</code> line in order to open the URL we extracted from the hash and then save that image data into a file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spaced Repetition and the Novice Programmer]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/27/spaced-repetition-and-the-novice-programmer/"/>
    <updated>2014-03-27T11:41:27-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/27/spaced-repetition-and-the-novice-programmer</id>
    <content type="html"><![CDATA[<p>Nothing compares with that moment when an idea hits you over the head like a ton of bricks labeled &ldquo;Duh!&rdquo; I experienced one of those today after coming across this great <a href="https://medium.com/medium-redef/5481606b087a">Medium piece</a> by Mattan Griffel about using <em>spaced repetition</em> for improving recall, then following that to an article by Derek Sivers about <a href="http://sivers.org/srs">studying programming languages</a> using the same technique. At the end of Sivers' article (and after reading that this idea has been around for <a href="http://en.wikipedia.org/wiki/Spacing_effect">over a century</a>!), I was left wondering why spaced repetition is not a foundational part of any and all learning we do.</p>

<p>It is hardly a complex concept: spaced repetition is the reviewing of learned information at specifically defined intervals, with those intervals being determined by your comfort with the information. You commonly run across this technique in flashcard apps &ndash; the <a href="https://www.brainscape.com">Brainscape</a> suite of apps is a good example, along with the more DIY example of <a href="http://ankisrs.net/index.html">Anki</a> that Griffel explores. The difference from the 3 x 5 colored notecards you made in middle school is that Anki and Brainscape are both powered by algorithms that decide when you should view each flashcard. This allows for a much more focused reviewing &ndash; the cards with basic information only show up sporadically, while the cards containing more involved ideas or information that you find yourself struggling with appear more frequently.</p>

<p><img src="http://gdurl.com/r6mx" alt="Brainscape web version" />
(The colored rating buttons at the bottom of the image above are part of the mechanism for determining when you will see certain cards in Brainscape. The higher you rate how well you knew the information, the less you will see the card.)</p>

<p>What baffles me is that spaced repetition is not built into every online learning platform. Imagine working on a Treehouse track or a Codeacademy course and being intermittently offered opportunities to quickly review the information you have been absorbing from other lessons. For the novice programmer, this repetition would be invaluable, as so often you learn about a new function (Ruby&rsquo;s <em>inject</em> always comes to mind for me) or quirk of the language and then do not see it again for a long stretch of time. The huge amount of information to absorb and explore in the early stages of learning a language makes deliberate and meaningful repetition of what you&rsquo;ve covered essential.</p>

<p>What also surprises me is that we do not see spaced repetition more in offline curriculum. I cannot imagine how much better my long term understanding and ability to use what I learned in <em>insert any high school subject here</em> would be had we been taught to use spaced repetition tools. It seems our whole education system is focused on the forward &ndash; the next chapter, the next test, the next year &ndash; and is a system that does not reward the concentrated study that leads to mastery. You have to wonder too if part of the motive for this forward inertia in our educational structure is profit: how many SAT cram courses/books/apps are you going to sell if students actually learn the material they need to know the first time they are taught it?</p>

<p>That said, I&rsquo;m going to dive into the Anki app and see what I can create as far as a flashcards repository for learning Ruby and Rails. Depending on how the app works, I&rsquo;ll try to post what I develop here for download.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying to Remember the Small Stuff]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/19/trying-to-remember-the-small-stuff/"/>
    <updated>2014-03-19T17:47:29-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/19/trying-to-remember-the-small-stuff</id>
    <content type="html"><![CDATA[<p>Refactoring is really fun, especially in those moments when you have an &ldquo;Aha!&rdquo; flash and one of those little details clicks into place. I had that today with method I wrote for changing the sorting on a table in a Rails view.</p>

<p><code>ruby
def sortable(column, title = nil)
  title ||= column.titleize
  direction = (column == sort_column &amp;&amp; sort_direction == "asc") ? "desc" : "asc"
  font_awesome_direction = direction == "asc" ? "up" : "down"
  css_class = column == sort_column ? "fa-caret-#{font_awesome_direction}" : nil
  link_to title, {:sort =&gt; column, :direction =&gt; direction}, {class: css_class}
end
</code></p>

<p>That sortable method was placed in my application_helper.rb. It works with these two methods from my view controller.</p>

<p>``` ruby
def sort_direction
  %w[asc desc].include?(params[:direction]) ?  params[:direction] : &ldquo;asc&rdquo;
end</p>

<p>def sort_column
  Expense.column_names.include?(params[:sort]) ? params[:sort] : &ldquo;date&rdquo;
end
```</p>

<p>And all of these are put into place with the index method in that same view controller.</p>

<p><code>ruby
def index
  @expenses = Expense.order(sort_column + ' ' + sort_direction).paginate(page: params[:page])
end
</code></p>

<p>Initially, what I&rsquo;d written wasn&rsquo;t terrible: it worked in the browser, my columns resorted themselves on prompting, and a nice little caret was provided as feedback and a guide post for the user. That said, I was irked by the way the caret was smushed right up against the text and the way that adding the caret threw off the font sizing and styling I had going at the top of my table.</p>

<p>So, I took a step back and tried to determine out if it was possible to embed HTML inside of a link_to in Rails. A couple minutes later, I had figured out it was perfectly acceptable and learned a little bit about the nifty #html_safe method that Rails provides. This led me to a rewritten last line that I think provides a much more pleasing output.</p>

<p><code>ruby
link_to "&lt;i class='fa #{css_class}'&gt;&lt;/i&gt; ".html_safe+title, {:sort =&gt; column, :direction =&gt; direction}
</code></p>

<p>It was also great to have one of those moments when all that reading comes in handy. I couldn&rsquo;t get the icons to appear the first time I fired up the page, because I had wrapped my icon HTML in single quotes instead of double. Using double quotes on the outside and then single on the inside allows Ruby to interpolate the css_class variable. Nothing fancy, but still a good learning experience that will hopefully keep me more consistent with my use of quotes.</p>
]]></content>
  </entry>
  
</feed>
