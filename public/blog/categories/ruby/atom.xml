<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | John Keith]]></title>
  <link href="http://johnk.herokuapp.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://johnk.herokuapp.com/"/>
  <updated>2014-04-22T18:39:02-04:00</updated>
  <id>http://johnk.herokuapp.com/</id>
  <author>
    <name><![CDATA[John Keith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSON and Nested Hashes in Ruby]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/04/01/json-and-nested-hashes-in-ruby/"/>
    <updated>2014-04-01T21:33:09-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/04/01/json-and-nested-hashes-in-ruby</id>
    <content type="html"><![CDATA[<p>JSON is one of the major data formats out there on the web, known for its readability. Personally, I was a little unsure about that readability aspect after pulling up my first JSON document and seeing this mess.</p>

<p><img src="http://gdurl.com/PP1x" alt="Crazy JSON!" /></p>

<p>The first step towards wrapping your head around JSON is to see it printed in a prettier fashion. Head over to <a href="http://www.jsoneditoronline.org">JSON Online Editor</a> and using the &ldquo;Open URL&rdquo; option you can paste the URL to a JSON document and see this format is actually much more presentable than it lets on. (If you need a JSON example to play with while reading this, don&rsquo;t hesitate to use <a href="http://teamtreehouse.com/johnkeith.json">my Treehouse profile</a>, as this provides you with a complex, multidimensional set of data to manipulate).</p>

<p>I decided to start by figuring out how to work with JSON in Ruby, as currently I feel more comfortable with Ruby than Javascript. Luckily, Ruby makes handling JSON from the web easy with a few of its built in libraries and modules.</p>

<p>At the top of your Ruby file (or in IRB if you would rather try this out in the terminal), you will need to require the Net/HTTP library and the JSON module.</p>

<p><code>ruby
require 'net/http'
require 'json'
</code></p>

<p>Net/HTTP allows you to do all types connect to websites within Ruby and do all types of nifty stuff. For instance, the following code will assign our JSON document&rsquo;s contents to the variable response.</p>

<p><code>ruby
response = Net::HTTP.get_response(URI.parse('http://teamtreehouse.com/johnkeith.json'))
</code></p>

<p>The get_response method returns a Net::HTTPResponse object that contains header and body information from the website specified. Since we are are specifying a JSON document, there is no header, but you can check the output of your response object with <code>response.body.inspect</code>.</p>

<p>Now that we have the JSON document retreived from the web, we need to parse it and turn the data into something more easily used by Ruby.</p>

<p><code>ruby
result = JSON.parse(response.body)
</code></p>

<p>(I found it helpful to look at the difference between the raw Net::HTTP response and the parse JSON &ndash; try running <code>puts JSON.pretty_generate(result)</code> and <code>puts response.body</code> to see how the parse method formats the data into a Ruby readable hash.)</p>

<p>Next, we need to access the data within our newly parsed hash of JSON data. You can access Ruby hashes with a similar syntax to the one used for arrays &ndash; start with the hash name, then a key from the hash in brackets.</p>

<p><code>ruby
result["badges"]
result["badges"][0]
result["badges"][0]["name"]
</code></p>

<p>The examples above show you how you can move through a nested hash and access data within different sections of your JSON document. Putting this syntax to use, you can quickly pull out all the URLs for the badge icons from this Treehouse JSON.</p>

<p><code>ruby
result["badges"].each do |item|
  puts item["icon_url"]
end
</code></p>

<p>While I thought it was awesome to be able to drill down to these URLs, I decided I wanted to do something with this data. To round out my exploration of JSON and Ruby, I wrote a small script to grab all of the images located at these URLs and save them to my computer.</p>

<p>``` ruby
require &lsquo;open-uri&rsquo;
result[&ldquo;badges&rdquo;].each do |item|
  open(&ldquo;badge#{item["id&rdquo;]}.png", &ldquo;w+&rdquo;) do |file|</p>

<pre><code>open(item["icon_url"]) do |image|
  file.write(image.read)
end
</code></pre>

<p>  end
end
```</p>

<p>The Open URI module, according to the Ruby docs, allows you &ldquo;to open an http, https, or ftp URL as though it were a file.&rdquo; The code above uses this capability in the <code>open(item["icon_url"] do |image|</code> line in order to open the URL we extracted from the hash and then save that image data into a file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spaced Repetition and the Novice Programmer]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/27/spaced-repetition-and-the-novice-programmer/"/>
    <updated>2014-03-27T11:41:27-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/27/spaced-repetition-and-the-novice-programmer</id>
    <content type="html"><![CDATA[<p>Nothing compares with that moment when an idea hits you over the head like a ton of bricks labeled &ldquo;Duh!&rdquo; I experienced one of those today after coming across this great <a href="https://medium.com/medium-redef/5481606b087a">Medium piece</a> by Mattan Griffel about using <em>spaced repetition</em> for improving recall, then following that to an article by Derek Sivers about <a href="http://sivers.org/srs">studying programming languages</a> using the same technique. At the end of Sivers' article (and after reading that this idea has been around for <a href="http://en.wikipedia.org/wiki/Spacing_effect">over a century</a>!), I was left wondering why spaced repetition is not a foundational part of any and all learning we do.</p>

<p>It is hardly a complex concept: spaced repetition is the reviewing of learned information at specifically defined intervals, with those intervals being determined by your comfort with the information. You commonly run across this technique in flashcard apps &ndash; the <a href="https://www.brainscape.com">Brainscape</a> suite of apps is a good example, along with the more DIY example of <a href="http://ankisrs.net/index.html">Anki</a> that Griffel explores. The difference from the 3 x 5 colored notecards you made in middle school is that Anki and Brainscape are both powered by algorithms that decide when you should view each flashcard. This allows for a much more focused reviewing &ndash; the cards with basic information only show up sporadically, while the cards containing more involved ideas or information that you find yourself struggling with appear more frequently.</p>

<p><img src="http://gdurl.com/r6mx" alt="Brainscape web version" />
(The colored rating buttons at the bottom of the image above are part of the mechanism for determining when you will see certain cards in Brainscape. The higher you rate how well you knew the information, the less you will see the card.)</p>

<p>What baffles me is that spaced repetition is not built into every online learning platform. Imagine working on a Treehouse track or a Codeacademy course and being intermittently offered opportunities to quickly review the information you have been absorbing from other lessons. For the novice programmer, this repetition would be invaluable, as so often you learn about a new function (Ruby&rsquo;s <em>inject</em> always comes to mind for me) or quirk of the language and then do not see it again for a long stretch of time. The huge amount of information to absorb and explore in the early stages of learning a language makes deliberate and meaningful repetition of what you&rsquo;ve covered essential.</p>

<p>What also surprises me is that we do not see spaced repetition more in offline curriculum. I cannot imagine how much better my long term understanding and ability to use what I learned in <em>insert any high school subject here</em> would be had we been taught to use spaced repetition tools. It seems our whole education system is focused on the forward &ndash; the next chapter, the next test, the next year &ndash; and is a system that does not reward the concentrated study that leads to mastery. You have to wonder too if part of the motive for this forward inertia in our educational structure is profit: how many SAT cram courses/books/apps are you going to sell if students actually learn the material they need to know the first time they are taught it?</p>

<p>That said, I&rsquo;m going to dive into the Anki app and see what I can create as far as a flashcards repository for learning Ruby and Rails. Depending on how the app works, I&rsquo;ll try to post what I develop here for download.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trying to Remember the Small Stuff]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/19/trying-to-remember-the-small-stuff/"/>
    <updated>2014-03-19T17:47:29-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/19/trying-to-remember-the-small-stuff</id>
    <content type="html"><![CDATA[<p>Refactoring is really fun, especially in those moments when you have an &ldquo;Aha!&rdquo; flash and one of those little details clicks into place. I had that today with method I wrote for changing the sorting on a table in a Rails view.</p>

<p><code>ruby
def sortable(column, title = nil)
  title ||= column.titleize
  direction = (column == sort_column &amp;&amp; sort_direction == "asc") ? "desc" : "asc"
  font_awesome_direction = direction == "asc" ? "up" : "down"
  css_class = column == sort_column ? "fa-caret-#{font_awesome_direction}" : nil
  link_to title, {:sort =&gt; column, :direction =&gt; direction}, {class: css_class}
end
</code></p>

<p>That sortable method was placed in my application_helper.rb. It works with these two methods from my view controller.</p>

<p>``` ruby
def sort_direction
  %w[asc desc].include?(params[:direction]) ?  params[:direction] : &ldquo;asc&rdquo;
end</p>

<p>def sort_column
  Expense.column_names.include?(params[:sort]) ? params[:sort] : &ldquo;date&rdquo;
end
```</p>

<p>And all of these are put into place with the index method in that same view controller.</p>

<p><code>ruby
def index
  @expenses = Expense.order(sort_column + ' ' + sort_direction).paginate(page: params[:page])
end
</code></p>

<p>Initially, what I&rsquo;d written wasn&rsquo;t terrible: it worked in the browser, my columns resorted themselves on prompting, and a nice little caret was provided as feedback and a guide post for the user. That said, I was irked by the way the caret was smushed right up against the text and the way that adding the caret threw off the font sizing and styling I had going at the top of my table.</p>

<p>So, I took a step back and tried to determine out if it was possible to embed HTML inside of a link_to in Rails. A couple minutes later, I had figured out it was perfectly acceptable and learned a little bit about the nifty #html_safe method that Rails provides. This led me to a rewritten last line that I think provides a much more pleasing output.</p>

<p><code>ruby
link_to "&lt;i class='fa #{css_class}'&gt;&lt;/i&gt; ".html_safe+title, {:sort =&gt; column, :direction =&gt; direction}
</code></p>

<p>It was also great to have one of those moments when all that reading comes in handy. I couldn&rsquo;t get the icons to appear the first time I fired up the page, because I had wrapped my icon HTML in single quotes instead of double. Using double quotes on the outside and then single on the inside allows Ruby to interpolate the css_class variable. Nothing fancy, but still a good learning experience that will hopefully keep me more consistent with my use of quotes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build What You Use as a Way to Learn]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/06/build-what-you-use-when-learning/"/>
    <updated>2014-03-06T17:38:44-05:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/06/build-what-you-use-when-learning</id>
    <content type="html"><![CDATA[<p>I can&rsquo;t remember where I read it, but recently I came across the advice that one of the best ways to practice programming is to recreate the type of applications you use everyday. No need to make them flashy, simply implement their core features in order to achieve the same results.</p>

<p>I decided to give it a try today and build a tiny todo app in Ruby. I wanted to write the app keeping in mind the directives from Sandi&rsquo;s Metz&rsquo;s <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">Practical Object-Oriented Design in Ruby</a>.</p>

<blockquote><p>&ldquo;Remember that a class should do the smallest possible useful thing. That
thing ought to be simple to describe. If the simplest description you can devise uses the
word "and,” the class likely has more than one responsibility.​&rdquo; &ndash; Metz</p></blockquote>

<p>While it ended up that my app only had one class, I tried to follow in the spirit of the quote above by keeping my methods as focused as possible. I also tried to heed her advice to stave off design decisions for as long as possible &ndash; an interesting strategy that had me trying to store all completed and incomplete todos in the same file. I quickly realized, though, that this was an inefficient way of doing things, since my completed items list would (hopefully) be a far larger file than my active items list and there is no reason to load that large file every time the app is opened.</p>

<p>There is one little quirk that I can&rsquo;t seem to shake: when you mark a todo as finished, the item is removed from the activelist.txt file, but is not added to the completelist.txt file until you close the program. I&rsquo;m sure it has something to do with the file opening modes I selected, but I can&rsquo;t figure out why I am able to modify and then view the modifications done to activelist.txt while in the app, but not do the same with completelist.txt.</p>

<p>In the end, this was a great way to get practice using the File and IO classes of Ruby and exploring their methods. Not to mention, I get a pretty nifty little command line todo list manager (which I&rsquo;ll stick in Dropbox for easy access) out of it!</p>

<p>``` ruby
require &lsquo;rbconfig&rsquo;</p>

<p>class Todo</p>

<pre><code>def clear_screen
    host_os = RbConfig::CONFIG['host_os']

    case host_os
        when /mswin|msys|mingw|cygwin|bccwin|wince|emc/
            system "cls"
        when /darwin|mac os|linux|solaris|bsd/
            puts "\e[H\e[2J"
    end
end

def open_app
    view_all
end

def view_all
    clear_screen

    list_read = read_active_list

    puts "------INCOMPLETE------\n\n"
    list_read.each do |line|
        puts line
    end
    puts "\n----------------------"

    choose_action
end

def read_active_list
    list = File.open("activelist.txt","a+").readlines
end

def choose_action
    puts %/
    What would you like to do with your list?
    1. Add a todo
    2. Mark complete
    3. View incomplete
    4. View completed
    5. Exit/

    choice = gets.chomp.downcase

    case choice
        when "1" then input_todo
        when "1." then input_todo
        when "add" then input_todo
        when "add todo" then input_todo

        when "2" then mark_done
        when "2." then mark_done
        when "mark" then mark_done
        when "mark done" then mark_done

        when "3" then view_incomplete
        when "3." then view_incomplete
        when "view incomplete" then view_incomplete

        when "4" then view_complete
        when "4." then view_complete
        when "view completed" then view_complete

        when "5" then return
        when "5." then return
        when "exit" then return

        else
            p "Not a valid choice"
            choose_action
    end
end
</code></pre>

<h1>ask for todo</h1>

<pre><code>def input_todo
    puts "\nEnter your new todo:"
    todo = gets.chomp
    add_todo(todo)
    view_all
end
</code></pre>

<h1>write method</h1>

<pre><code>def add_todo(todo)
    File.open("activelist.txt", "a") { |f| f.write "#{todo}\n" }
end
</code></pre>

<h1>mark done method</h1>

<pre><code>def mark_done
    clear_screen

    list_read = File.open("activelist.txt","a+").readlines

    puts "------INCOMPLETE------\n\n"
    list_read.each_with_index do |line, index|
        puts "#{index + 1}. " + line
    end
    puts "\n----------------------"

    puts "\nWhich todo do you want to mark complete? (Type the number or zero to cancel)."

    choice = gets.chomp.to_i

    File.open("activelist.txt", "w") do |f|
        list_read.each_with_index do |line, index|
            if (index + 1) == choice 
                add_to_complete_list line
            else
                f.write "#{line}"
            end
        end
    end

    view_all
end

def add_to_complete_list line
    File.open("completelist.txt", "a").write "#{line}"
end

def view_complete
    clear_screen

    complete_list = File.open("completelist.txt", "a+").readlines

    puts "------COMPLETED------\n\n"
    complete_list.each do |line|
        puts line
    end
    puts "\n---------------------"

    choose_action
end

def view_incomplete
    view_all
end
</code></pre>

<p>end</p>

<p>my_todo_list = Todo.new</p>

<p>my_todo_list.open_app
```</p>
]]></content>
  </entry>
  
</feed>
