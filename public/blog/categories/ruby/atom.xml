<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | John Keith]]></title>
  <link href="http://johnk.herokuapp.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://johnk.herokuapp.com/"/>
  <updated>2015-04-12T00:02:01-04:00</updated>
  <id>http://johnk.herokuapp.com/</id>
  <author>
    <name><![CDATA[John Keith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Defining a Method Accessible From Anywhere in a Rails App]]></title>
    <link href="http://johnk.herokuapp.com/blog/2015/04/11/defining-a-method-accessible-from-anywhere-in-a-rails-app/"/>
    <updated>2015-04-11T19:56:11-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2015/04/11/defining-a-method-accessible-from-anywhere-in-a-rails-app</id>
    <content type="html"><![CDATA[<p>It started as an innocuous attempt to dry up some controller code.</p>

<p>```ruby</p>

<h1>app/controllers/export_controller.rb</h1>

<p>if ENV[&lsquo;TORQUEBOX_APP_TYPE&rsquo;].present? || ENV[&lsquo;TORQUEBOX_APP_NAME&rsquo;].present?</p>

<pre><code># do some crazy stuff in a background process since this is clearly running in production
</code></pre>

<p>else</p>

<pre><code># Rails must be running locally, so do it in the foreground
</code></pre>

<p>```</p>

<p>I noticed that the same <code>if</code> statement was used in our config/application.rb to setup the correct logging when Torquebox is running. After searching the rest of the code and seeing the same logic was present in config/environments/development.rb I mistakenly thought, &ldquo;It can&rsquo;t be too hard to figure out how to have a method accessible from anywhere in a Rails app.&rdquo;</p>

<p>How wrong I was!</p>

<p>That said, I came up with two possible solutions. The first was to create a proc, stuff it in a global variable, and then access that from each of the places I needed (the config files and the controller).</p>

<p><code>ruby
$torquebox_running = Proc.new { ENV['TORQUEBOX_APP_TYPE'].present? || ENV['TORQUEBOX_APP_NAME'].present? }
</code></p>

<p>While the proc worked, I didn&rsquo;t think it was the best solution for two structural reasons.</p>

<ol>
<li><p>It would have to be defined in application.rb in order to be used in the start up process, but being defined in that file outside of the Application class (so that it could be accessed elsewhere in the app) would be a tad strange.</p></li>
<li><p>Usage wise, the syntax of $torquebox_running.call seemed a bit strained to me.</p></li>
</ol>


<p>My gut told me that I might be breaking every law in the book by declaring a global proc during the boot-up process of a Rails app. So I decided on a more compartmentalized (though still perhaps not object-oriented) approach to solving the problem.</p>

<p>```ruby</p>

<h1>lib/services/torquebox_information_service.rb</h1>

<p>module TorqueboxInformationService</p>

<pre><code>extend self

def env_vars_present? 
    ENV['TORQUEBOX_APP_TYPE'].present? || ENV['TORQUEBOX_APP_NAME'].present?
end

def process_running?
    # not working, needs refinement
    process_pid = Process.pid
    process_info = `ps -ef | grep #{process_pid}`
    process_info.downcase.include?('torquebox')
end
</code></pre>

<p>end
```</p>

<p>```ruby</p>

<h1>config/application.rb</h1>

<p>require File.expand_path(&lsquo;../../lib/services/torquebox_information_service&rsquo;, <strong>FILE</strong>)
```</p>

<p>By wrapping these environment checking methods inside a module and using the handy <code>extend self</code>, the logic was kept isolated and no awful globals created in the process.</p>

<p>I then required the module in the application.rb above all other requirements and the Application class in order that it would be available in every part of the app (config files, models, controllers, the whole gaggle of them!). So far, this approach is working and allows the logic for checking if Torquebox is running to be stored in a single place.</p>

<p>I still feel like this could be improved, though. Maybe by not using <code>extend self</code> and instead including the module on any of the classes that need access to these methods it would better keep these Torquebox logic confined to only the places in the app that need access?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I've Learned in Five Short Weeks at Launch]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/06/15/how-ive-learned-in-five-short/"/>
    <updated>2014-06-15T21:20:25-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/06/15/how-ive-learned-in-five-short</id>
    <content type="html"><![CDATA[<p>We are now officially halfway through our ten weeks at Launch. What I&rsquo;m still marveling at after five weeks is how Launch Academy is transforming me as a learner.</p>

<p>Pre-Launch, back in high school and college, I was a very learn-by-the-book kind of guy. I would read cover to cover any text put in front of me, but asking me to jump into a topic or domain without much preparation beforehand was always a struggle.</p>

<p>One great part about learning web development is that the read first, execute later approach I relied on in the past does not work. I&rsquo;ve felt myself constantly challenged the past few weeks to dive into projects knowing only enough to get started and then to seek out only the knowledge I need to complete to reach the goal.</p>

<p>Fundamentally, I guess this is what makes project-based learning powerful: the fact that the knowledge you acquire is all acquired in a specific context of doing or creating. Even as I&rsquo;ve started to head off on tangents of my own, like diving deeply into Javascript prototypes last week, this learning is done to serve a purpose, to bring some piece of functionality into existence.</p>

<p>If you want to take the metaphor perhaps a little too far (which is always a fun exercise), it is almost like the project-based curriculum of Launch is OOP for your brain. Sure, you can gather knowledge together in your mind about a certain object, but these little tarballs of information are worthless until you start defining behaviors and passing messages between them. Knowledge as an object in and of itself does nothing &ndash; it is only once it starts to interact with other bits of information that the effect is meaningful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week Four and the Challenges of OOP]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/06/09/week-four-and-the-challenges-of-oop/"/>
    <updated>2014-06-09T07:32:47-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/06/09/week-four-and-the-challenges-of-oop</id>
    <content type="html"><![CDATA[<p>Week four saw us moving into object oriented programming fully, a move that has certainly come with its share of challenges.</p>

<p>What I&rsquo;m finding most challenging about OOP is figuring out how to reorient an app once it has gotten off track. A friend and I started working on a game a little over a week ago, back before we were really comfortable with OOP, and this week our lack of discipline and underlying structure has become more and more apparent as our code base has ballooned.</p>

<p><img src="http://gdurl.com/2q7r" alt="UnoDos" /></p>

<p>(It&rsquo;s amazing how quickly the complexity of a game, even a simple one, can get out of hand). Certainly, working on the game has been a great exercise, though, for struggling through the realities of OOP.</p>

<p>We also started moving into ActiveRecord last week, initially building some of the pieces ourselves and then seeing how ActiveRecord makes the process of interacting with a database much more enjoyable. This week we&rsquo;ll be beginning with Rails, so I&rsquo;m excited to be getting back into it and diving into the nitty gritty details. Already, with all of our work the past few weeks, I feel much more prepared to figure out how Rails really works than I ever did learning on my own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week Three and Designing for Efficiency]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/06/01/week-three-and-designing-for-efficiency/"/>
    <updated>2014-06-01T19:31:07-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/06/01/week-three-and-designing-for-efficiency</id>
    <content type="html"><![CDATA[<p>Week three of Launch Academy was a short one with the holiday on Monday, but we covered a lot of ground. It was the start of the second module in the curriculum and we dove headfirst into databases this week. The relation database we are using right now is Postgres, which has been a nice change from the static data storage in CSV files we were using in weeks one and two.</p>

<p>We also had a great speaker come this week &ndash; <a href="https://twitter.com/PDegenPortnoy">Peter Degen-Portnoy</a>. He gave us a brief introduction to object oriented design, which will be the focus of our work this week.</p>

<p>Outside of our core material last week, I spent time wresting with problems of efficiency. I found myself still mulling over mechanics from the 2048 code I wrote in week two, looking for ways to improve the efficiency of the logic used to find random empty spaces on the game board. I knew our initial way was not ideal &ndash; it determined random X and Y coordinates on the board and checked to see if that space was empty. Eventually, I ended up benchmarking three different ways of finding a random empty space in a matrix and I believe I found a reasonably efficient way to go about it. (It is the middle method of the three below, which gives consistently better results, often taking half the time of the other two).</p>

<p>My goal is to continue thinking along these lines this week &ndash; learning about how to incorporate object oriented design into our apps while keeping an eye out for writing efficient code.</p>

<p>``` ruby
test_board = [[&ldquo;2&rdquo;,&ldquo;4&rdquo;,&ldquo;4&rdquo;,&ldquo;2&rdquo;],</p>

<pre><code>          ["4","2","2"," "],
          ["2","2","8","2"],
          ["4","3","4","8"]]
</code></pre>

<p>def insertRandomly(board)
  two_or_four = rand.round == 0 ? 4 : 2
  insert_successful = false
  while !insert_successful</p>

<pre><code>random_position_one = rand(board.length)
random_position_two = rand(board.length)
if board[random_position_one][random_position_two] == " "
  board[random_position_one][random_position_two] = two_or_four.to_s
  insert_successful = true
end
</code></pre>

<p>  end
end</p>

<p>def insertLessRandomly(board)
  two_or_four = rand.round == 0 ? 4 : 2
  random_direction = rand.round == 0 ? true : false
  insert_successful = false
  while !insert_successful</p>

<pre><code>random_position_one = rand(board.length)
empty_space = nil
empty_space = board[random_position_one].find_index do |item|
  item == " "
end
if empty_space != nil
  board[random_position_one][empty_space] = two_or_four.to_s
  insert_successful = true
end
</code></pre>

<p>  end
end</p>

<p>def insertByIndex(board)
  two_or_four = rand.round == 0 ? 4 : 2
  empty_spaces = []
  board.each_with_index do |row, row_index|</p>

<pre><code>row.each_with_index do |column, col_index|
  empty_spaces &lt;&lt; [row_index, col_index] if column == " "
end
</code></pre>

<p>  end
  select_empty = empty_spaces.sample
  board[select_empty[0]][select_empty[1]] = two_or_four
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Ruby Toolbox at the End of Week Two]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/05/26/my-ruby-toolbox-at-the-end-of-week-two/"/>
    <updated>2014-05-26T07:49:44-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/05/26/my-ruby-toolbox-at-the-end-of-week-two</id>
    <content type="html"><![CDATA[<p>Week two flew by and it is amazing how far we have come. It is also amazing how overrun the Launch Academy folder on my laptop is right now. For my reflective post this week, I think it would be a good exercise to do some house keeping on the code I&rsquo;ve written so far and take a look at some of the awesome tools I&rsquo;m starting to learn how to use in Ruby.</p>

<p>One of the most fun things I did was work with a couple other Launchers on recreating the <a href="https://github.com/johnkeith/Ruby2048">2048 game on the command line</a>. It was a great exercise &ndash; working with nested arrays that represented the board, constructing the methods that would move and recalculate the board each turn. The hardest part was combing Google to find out how to handle improper keyboard inputs from the terminal (for example, if you type &ldquo;Z&rdquo; instead of the &ldquo;A&rdquo;,&ldquo;S&rdquo;,&ldquo;W&rdquo;, or &ldquo;D&rdquo; keys we specified for moving). It was a slight distraction from our main work of the week, but I really loved figuring out how the mechanisms behind the game worked. (I&rsquo;d love to work on making an online playable version of the game in Sinatra, but that might have to wait until I have a better grasp of Javascript.) Here&rsquo;s a little snippet of our moving method using #transpose to flip the board around for easier calculating.</p>

<p>``` ruby
def strip_row_right(row)
  row.delete_if {|space| space == &ldquo; &rdquo;}
  until row.length == 4</p>

<pre><code>row.unshift(" ")
</code></pre>

<p>  end
  row
end</p>

<p>def move_down(board)
  board = board.transpose
  board.each_with_index do |row, row_idx|</p>

<pre><code>strip_row_right(row)
row.reverse!.each_with_index do |column, col_idx|
  if column == row[col_idx + 1] &amp;&amp; !(column == " " )
    board[row_idx][col_idx] = (board[row_idx][col_idx].to_i * 2).to_s
    board[row_idx][col_idx+1] = " "
  else
    next
  end
end
row.reverse!
strip_row_right(row)
</code></pre>

<p>  end
  board.transpose
end
```
Another non-core, but extremely rewarding set of exercised I played with this week came from the <a href="https://evernote.com/careers/challenge.php">Evernote Challenge</a>. Basically, the challenge is a set of three problems that Evernote posted on their website, each of which can be submitted and automatically tested on the site. While I was never able to get my tests passing, sadly, I think I was able to sufficiently solve two of the problems, one involving a circular buffer and the other with counting the frequency of terms in a given input. I even dived into writing a few tests for my circular buffer solution to start preparing myself for the leap into TDD that will be coming up in the next few weeks. The frequency problem also was a great opportunity to deal with the travails of sorting hashes and multidimensional sorting of arrays.</p>

<p>``` ruby
terms_to_add = gets.chomp.to_i
items_to_count = Hash.new(0)</p>

<p>1.upto(terms_to_add).each do
  input = gets.chomp.to_sym
  items_to_count[input] += 1
end</p>

<p>take_amount = gets.chomp.to_i</p>

<p>take_top = items_to_count.sort_by { |k, v| v }.reverse.take(take_amount)</p>

<p>fully_sorted = take_top.sort_by {|item| [-item[-1], item[0].to_s] }</p>

<p>fully_sorted.each {|item| puts item[0].to_s }
```
As I mentioned, our big focus in class this week was on Sinatra. I built at least five Sinatra apps this week, ranging from ones that pulled in data from a CSV to ones that actually started creating dynamic pages based on JSON data from APIs. I also started using HAML extensively on these project. Its really awesome how simple and readable HAML makes an HTML page.</p>

<p>This weekend I&rsquo;ve been wrestling with creating a URL shortener in Sinatra. I&rsquo;ve made it to the point where the site is mostly functioning, but I&rsquo;m working on error and exception handling, which is no easy task. I also cannot for the life of me get my head around Redis, the database they recommended we use for this project, so I think I&rsquo;m going to be spending a good amount of time next week trying to figure out databases once and for all. That said, working on the URL shortener gave me a great opportunity to play around with the web scraping gem Nokogiri. Using Nokogiri, I was easily able to scrape a list of sandwich names (to be the links in my URL shortener) off a website and into a easily accessible array.</p>

<p>``` ruby
page = Nokogiri::HTML(open(&ldquo;<a href="http://www.thrillist.com/food/nation/national-sandwich-day">http://www.thrillist.com/food/nation/national-sandwich-day</a>&rdquo;))</p>

<p>sandwich_list = []</p>

<p>sandwiches = page.css(&ldquo;strong&rdquo;)</p>

<p>sandwiches.each do |item|
  sandwich_list &lt;&lt; item.text.downcase.gsub(/[\d+\W+\s]/, &ldquo;&rdquo;).gsub(/the/, &ldquo;&rdquo;)
end
```</p>
]]></content>
  </entry>
  
</feed>
