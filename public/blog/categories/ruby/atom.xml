<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | John Keith]]></title>
  <link href="http://johnk.herokuapp.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://johnk.herokuapp.com/"/>
  <updated>2014-06-09T07:50:23-04:00</updated>
  <id>http://johnk.herokuapp.com/</id>
  <author>
    <name><![CDATA[John Keith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Week Four and the Challenges of OOP]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/06/09/week-four-and-the-challenges-of-oop/"/>
    <updated>2014-06-09T07:32:47-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/06/09/week-four-and-the-challenges-of-oop</id>
    <content type="html"><![CDATA[<p>Week four saw us moving into object oriented programming fully, a move that has certainly come with its share of challenges.</p>

<p>What I&rsquo;m finding most challenging about OOP is figuring out how to reorient an app once it has gotten off track. A friend and I started working on a game a little over a week ago, back before we were really comfortable with OOP, and this week our lack of discipline and underlying structure has become more and more apparent as our code base has ballooned.</p>

<p><img src="http://gdurl.com/2q7r" alt="UnoDos" /></p>

<p>(It&rsquo;s amazing how quickly the complexity of a game, even a simple one, can get out of hand). Certainly, working on the game has been a great exercise, though, for struggling through the realities of OOP.</p>

<p>We also started moving into ActiveRecord last week, initially building some of the pieces ourselves and then seeing how ActiveRecord makes the process of interacting with a database much more enjoyable. This week we&rsquo;ll be beginning with Rails, so I&rsquo;m excited to be getting back into it and diving into the nitty gritty details. Already, with all of our work the past few weeks, I feel much more prepared to figure out how Rails really works than I ever did learning on my own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Week Three and Designing for Efficiency]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/06/01/week-three-and-designing-for-efficiency/"/>
    <updated>2014-06-01T19:31:07-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/06/01/week-three-and-designing-for-efficiency</id>
    <content type="html"><![CDATA[<p>Week three of Launch Academy was a short one with the holiday on Monday, but we covered a lot of ground. It was the start of the second module in the curriculum and we dove headfirst into databases this week. The relation database we are using right now is Postgres, which has been a nice change from the static data storage in CSV files we were using in weeks one and two.</p>

<p>We also had a great speaker come this week &ndash; <a href="https://twitter.com/PDegenPortnoy">Peter Degen-Portnoy</a>. He gave us a brief introduction to object oriented design, which will be the focus of our work this week.</p>

<p>Outside of our core material last week, I spent time wresting with problems of efficiency. I found myself still mulling over mechanics from the 2048 code I wrote in week two, looking for ways to improve the efficiency of the logic used to find random empty spaces on the game board. I knew our initial way was not ideal &ndash; it determined random X and Y coordinates on the board and checked to see if that space was empty. Eventually, I ended up benchmarking three different ways of finding a random empty space in a matrix and I believe I found a reasonably efficient way to go about it. (It is the middle method of the three below, which gives consistently better results, often taking half the time of the other two).</p>

<p>My goal is to continue thinking along these lines this week &ndash; learning about how to incorporate object oriented design into our apps while keeping an eye out for writing efficient code.</p>

<p>``` ruby
test_board = [[&ldquo;2&rdquo;,&ldquo;4&rdquo;,&ldquo;4&rdquo;,&ldquo;2&rdquo;],</p>

<pre><code>          ["4","2","2"," "],
          ["2","2","8","2"],
          ["4","3","4","8"]]
</code></pre>

<p>def insertRandomly(board)
  two_or_four = rand.round == 0 ? 4 : 2
  insert_successful = false
  while !insert_successful</p>

<pre><code>random_position_one = rand(board.length)
random_position_two = rand(board.length)
if board[random_position_one][random_position_two] == " "
  board[random_position_one][random_position_two] = two_or_four.to_s
  insert_successful = true
end
</code></pre>

<p>  end
end</p>

<p>def insertLessRandomly(board)
  two_or_four = rand.round == 0 ? 4 : 2
  random_direction = rand.round == 0 ? true : false
  insert_successful = false
  while !insert_successful</p>

<pre><code>random_position_one = rand(board.length)
empty_space = nil
empty_space = board[random_position_one].find_index do |item|
  item == " "
end
if empty_space != nil
  board[random_position_one][empty_space] = two_or_four.to_s
  insert_successful = true
end
</code></pre>

<p>  end
end</p>

<p>def insertByIndex(board)
  two_or_four = rand.round == 0 ? 4 : 2
  empty_spaces = []
  board.each_with_index do |row, row_index|</p>

<pre><code>row.each_with_index do |column, col_index|
  empty_spaces &lt;&lt; [row_index, col_index] if column == " "
end
</code></pre>

<p>  end
  select_empty = empty_spaces.sample
  board[select_empty[0]][select_empty[1]] = two_or_four
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Ruby Toolbox at the End of Week Two]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/05/26/my-ruby-toolbox-at-the-end-of-week-two/"/>
    <updated>2014-05-26T07:49:44-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/05/26/my-ruby-toolbox-at-the-end-of-week-two</id>
    <content type="html"><![CDATA[<p>Week two flew by and it is amazing how far we have come. It is also amazing how overrun the Launch Academy folder on my laptop is right now. For my reflective post this week, I think it would be a good exercise to do some house keeping on the code I&rsquo;ve written so far and take a look at some of the awesome tools I&rsquo;m starting to learn how to use in Ruby.</p>

<p>One of the most fun things I did was work with a couple other Launchers on recreating the <a href="https://github.com/johnkeith/Ruby2048">2048 game on the command line</a>. It was a great exercise &ndash; working with nested arrays that represented the board, constructing the methods that would move and recalculate the board each turn. The hardest part was combing Google to find out how to handle improper keyboard inputs from the terminal (for example, if you type &ldquo;Z&rdquo; instead of the &ldquo;A&rdquo;,&ldquo;S&rdquo;,&ldquo;W&rdquo;, or &ldquo;D&rdquo; keys we specified for moving). It was a slight distraction from our main work of the week, but I really loved figuring out how the mechanisms behind the game worked. (I&rsquo;d love to work on making an online playable version of the game in Sinatra, but that might have to wait until I have a better grasp of Javascript.) Here&rsquo;s a little snippet of our moving method using #transpose to flip the board around for easier calculating.</p>

<p>``` ruby
def strip_row_right(row)
  row.delete_if {|space| space == &ldquo; &rdquo;}
  until row.length == 4</p>

<pre><code>row.unshift(" ")
</code></pre>

<p>  end
  row
end</p>

<p>def move_down(board)
  board = board.transpose
  board.each_with_index do |row, row_idx|</p>

<pre><code>strip_row_right(row)
row.reverse!.each_with_index do |column, col_idx|
  if column == row[col_idx + 1] &amp;&amp; !(column == " " )
    board[row_idx][col_idx] = (board[row_idx][col_idx].to_i * 2).to_s
    board[row_idx][col_idx+1] = " "
  else
    next
  end
end
row.reverse!
strip_row_right(row)
</code></pre>

<p>  end
  board.transpose
end
```
Another non-core, but extremely rewarding set of exercised I played with this week came from the <a href="https://evernote.com/careers/challenge.php">Evernote Challenge</a>. Basically, the challenge is a set of three problems that Evernote posted on their website, each of which can be submitted and automatically tested on the site. While I was never able to get my tests passing, sadly, I think I was able to sufficiently solve two of the problems, one involving a circular buffer and the other with counting the frequency of terms in a given input. I even dived into writing a few tests for my circular buffer solution to start preparing myself for the leap into TDD that will be coming up in the next few weeks. The frequency problem also was a great opportunity to deal with the travails of sorting hashes and multidimensional sorting of arrays.</p>

<p>``` ruby
terms_to_add = gets.chomp.to_i
items_to_count = Hash.new(0)</p>

<p>1.upto(terms_to_add).each do
  input = gets.chomp.to_sym
  items_to_count[input] += 1
end</p>

<p>take_amount = gets.chomp.to_i</p>

<p>take_top = items_to_count.sort_by { |k, v| v }.reverse.take(take_amount)</p>

<p>fully_sorted = take_top.sort_by {|item| [-item[-1], item[0].to_s] }</p>

<p>fully_sorted.each {|item| puts item[0].to_s }
```
As I mentioned, our big focus in class this week was on Sinatra. I built at least five Sinatra apps this week, ranging from ones that pulled in data from a CSV to ones that actually started creating dynamic pages based on JSON data from APIs. I also started using HAML extensively on these project. Its really awesome how simple and readable HAML makes an HTML page.</p>

<p>This weekend I&rsquo;ve been wrestling with creating a URL shortener in Sinatra. I&rsquo;ve made it to the point where the site is mostly functioning, but I&rsquo;m working on error and exception handling, which is no easy task. I also cannot for the life of me get my head around Redis, the database they recommended we use for this project, so I think I&rsquo;m going to be spending a good amount of time next week trying to figure out databases once and for all. That said, working on the URL shortener gave me a great opportunity to play around with the web scraping gem Nokogiri. Using Nokogiri, I was easily able to scrape a list of sandwich names (to be the links in my URL shortener) off a website and into a easily accessible array.</p>

<p>``` ruby
page = Nokogiri::HTML(open(&ldquo;<a href="http://www.thrillist.com/food/nation/national-sandwich-day">http://www.thrillist.com/food/nation/national-sandwich-day</a>&rdquo;))</p>

<p>sandwich_list = []</p>

<p>sandwiches = page.css(&ldquo;strong&rdquo;)</p>

<p>sandwiches.each do |item|
  sandwich_list &lt;&lt; item.text.downcase.gsub(/[\d+\W+\s]/, &ldquo;&rdquo;).gsub(/the/, &ldquo;&rdquo;)
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launch Academy Week 1 Reflections]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/05/16/launch-academy-week-1-reflections/"/>
    <updated>2014-05-16T20:41:21-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/05/16/launch-academy-week-1-reflections</id>
    <content type="html"><![CDATA[<p>Summing up week one of Launch Academy is tough: it&rsquo;s been a whirlwind of information and challenges. Here&rsquo;s what I do know: I could not be more excited to be here and on my way to becoming a software developer.</p>

<p>This first week really affirmed my desire to become a developer. Coming into Launch Academy, I was unsure of what life would be like working in web development professionally &ndash; I knew I&rsquo;d enjoyed tinkering in the past, but I didn&rsquo;t know what would it be like to be writing software everyday. At the end of this first week, I feel confident that I&rsquo;m going to enjoy this new career tremendously.</p>

<p>That&rsquo;s not to say this week was without it&rsquo;s travails. The Launch Academy instructors stressed from day one that software development is not just about code: great software is the product of strong communication. This is definitely been a big shift in thinking for me as up until now I&rsquo;ve essentially been flying solo when coding. It is certainly taken some adjustment and I feel one of the most important things I&rsquo;ve been working on this week is learning how to collaborate and develop solutions with other people.</p>

<p>On the technical side, the past five days been a huge boost for my abilities in Ruby. As we take on bigger and bigger problems, I&rsquo;m really enjoying figuring out how to design programs and implement them as concisely as possible. Towards the end of the week, after seeing it mentioned in one of our Ruby challenges, I started playing around with the Benchmark module and it has been very interesting to look at how different ways of performing operations can be more efficient than others. Here&rsquo;s some messing around with different methods of calculating the nth number in the Fibonacci sequence that I found interesting.</p>

<p>```ruby</p>

<p>require &lsquo;benchmark&rsquo;</p>

<p>time = Benchmark.realtime do
  def fibonacci(nth)</p>

<pre><code>array_o_fibs = []
if nth == 1 || nth == 2
  return 1
else
  array_o_fibs &lt;&lt; 1; array_o_fibs &lt;&lt; 1
  until array_o_fibs.length == nth
    array_o_fibs &lt;&lt; array_o_fibs[-1] + array_o_fibs[-2]
  end
end
array_o_fibs[-1]
</code></pre>

<p>  end</p>

<p>  fibonacci(100)
end</p>

<p>puts &ldquo;The time elapsed in milliseconds is #{time*1000} with the non-recursive fibonacci method.&rdquo;</p>

<p>time = Benchmark.realtime do</p>

<p>  def other_fibonacci(n)</p>

<pre><code>if n == 1 || n == 2
  1
else
  fibonacci(n - 1) + fibonacci(n - 2)
end
</code></pre>

<p>  end</p>

<p>  other_fibonacci(100)
end
puts &ldquo;The time elapsed in milliseconds is #{time*1000} with the recursive fibonacci method.&rdquo;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Final Prep for Launch Academy]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/04/30/final-prep-for-launch-academy/"/>
    <updated>2014-04-30T18:10:06-04:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/04/30/final-prep-for-launch-academy</id>
    <content type="html"><![CDATA[<p>The last part of our Launch Academy prep work is a moment of reflection. I feel like I&rsquo;ve come quite far since I started the prework &ndash; especially in terms of my understanding of Git. The Git Immersion and <a href="http://pcottle.github.io/learnGitBranching/">Learn Git Branching</a> were hugely helpful for me. Being able to visualize what is going on with rebases and merges made all the difference. Sandi Metz&rsquo;s book is by far my favorite of the readings and certainly the one I have spent the most time pouring over. Starting to understand the OOP patterns presented in that book has been a big turning point for me when it comes to grasping how entire applications are written and maintained.</p>

<p>In addition to finishing out my prework, I&rsquo;ve been spending a good deal of time on a site a Launch Academy staffer recommended called <a href="http://www.codequizzes.com/">Code Quizzes</a> and this has been a great way to sharpen all the Ruby that I&rsquo;ve been absorbing. Here are a few of the awesome methods and tricks I&rsquo;ve encountered so far from the quiz questions.</p>

<p><em>Question:</em>
<em>a = [1, 2, 3] and b = [&ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;c&rdquo;].  Use these arrays to make [[1, &ldquo;a&rdquo;], [2, &ldquo;b&rdquo;], [3, &ldquo;c&rdquo;]]</em></p>

<p>I really like the #zip method this question introduces. The #zip method allows you to combine two or more arrays with ease. Here&rsquo;s an example of combining three arrays.</p>

<p>``` ruby
a = [&ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;c&rdquo;]
b = %w(1 2 3 4 5)
c = [&ldquo;zip&rdquo;, &ldquo;method&rdquo;]</p>

<p>a.zip(b, c)</p>

<h1>[[&ldquo;a&rdquo;, &ldquo;1&rdquo;, &ldquo;zip&rdquo;], [&ldquo;b&rdquo;, &ldquo;2&rdquo;, &ldquo;method&rdquo;], [&ldquo;c&rdquo;, &ldquo;3&rdquo;, nil]]</h1>

<p>Hash[a.zip(b)]</p>

<h1>{&ldquo;a&rdquo;=>&ldquo;1&rdquo;, &ldquo;b&rdquo;=>&ldquo;2&rdquo;, &ldquo;c&rdquo;=>&ldquo;3&rdquo;}</h1>

<p>```
You can see from the above that zip can be quite flexible and formidable, mashing together arrays or even forming hashes.</p>

<p>The #cycle method is another interesting array operation that came up in questions on Code Quizzes. With #cycle, you can perform a block for a specified amount of times. For example, if you had an array you can use #cycle to print out its contents in order any number of times.</p>

<p>``` ruby
a = [1, 2, 3, 4]</p>

<p>a.cycle(4) { |i| p i }
```</p>

<p>Inject is certainly a method I want to master: it is really amazing how you can pass in a method to inject and let it do the work for you, without having to write a complete block.</p>

<p><code>ruby
[1, 2, 3, 4, 5, 42].inject(:+)
</code></p>

<p>One question that had me a tad <a href="http://www.gullahbible.com/e-GullahNT/Conc/44JHNGUL.htm">bumfumbled</a> involved passing a method as a block and it being considered a Proc.</p>

<p><em>Question:</em>
<em>arr = [&ldquo;a&rdquo;, &ldquo;b&rdquo;].  Capitalize each element of arr with a proc.</em></p>

<p>The answer given was <code>arr.map(&amp;:upcase)</code>, which I am assuming means that you can pass methods as blocks and with some voodoo they turn into Procs.</p>

<p>Further on, there was a great question that begged for a similar solution.</p>

<p><em>Question:</em>
<em>Use a one-liner to find the longest word in the array: arr = %w{what is the longest word in this arrrrrray}</em></p>

<p>The site proposed the method below.</p>

<p><code>ruby
arr.inject { |longest_word, word| word.length &gt; longest_word.length ? word : longest_word}
</code></p>

<p>I think, however, it could be put more succicently with <code>arr.sort_by(&amp;:length).last</code>.</p>

<p>The larger pattern that I&rsquo;m begining to see is that with Ruby there is always another way, or twenty, to solve a problem.</p>
]]></content>
  </entry>
  
</feed>
