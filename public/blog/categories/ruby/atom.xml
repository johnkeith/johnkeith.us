<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | John Keith]]></title>
  <link href="http://johnk.herokuapp.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://johnk.herokuapp.com/"/>
  <updated>2014-03-06T17:46:29-05:00</updated>
  <id>http://johnk.herokuapp.com/</id>
  <author>
    <name><![CDATA[John Keith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build What You Use as a Way to Learn]]></title>
    <link href="http://johnk.herokuapp.com/blog/2014/03/06/build-what-you-use-when-learning/"/>
    <updated>2014-03-06T17:38:44-05:00</updated>
    <id>http://johnk.herokuapp.com/blog/2014/03/06/build-what-you-use-when-learning</id>
    <content type="html"><![CDATA[<p>I can’t remember where I read it, but recently I came across the advice that one of the best ways to practice programming is to recreate the type of applications you use everyday. No need to make them flashy, simply implement their core features in order to achieve the same results. </p>

<p>I decided to give it a try today and build a tiny todo app in Ruby. I wanted to write the app keeping in mind the directives from Sandi’s Metz’s <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">Practical Object-Oriented Design in Ruby</a>.</p>

<blockquote>
  <p>“Remember that a class should do the smallest possible useful thing. That
thing ought to be simple to describe. If the simplest description you can devise uses the
word “and,” the class likely has more than one responsibility.​” - Metz</p>
</blockquote>

<p>While it ended up that my app only had one class, I tried to follow in the spirit of the quote above by keeping my methods as focused as possible. I also tried to heed her advice to stave off design decisions for as long as possible - an interesting strategy that had me trying to store all completed and incomplete todos in the same file. I quickly realized, though, that this was an inefficient way of doing things, since my completed items list would (hopefully) be a far larger file than my active items list and there is no reason to load that large file every time the app is opened.</p>

<p>There is one little quirk that I can’t seem to shake: when you mark a todo as finished, the item is removed from the activelist.txt file, but is not added to the completelist.txt file until you close the program. I’m sure it has something to do with the file opening modes I selected, but I can’t figure out why I am able to modify and then view the modifications done to activelist.txt while in the app, but not do the same with completelist.txt.</p>

<p>In the end, this was a great way to get practice using the File and IO classes of Ruby and exploring their methods. Not to mention, I get a pretty nifty little command line todo list manager (which I’ll stick in Dropbox for easy access) out of it! </p>

<div><div class="CodeRay">
  <div class="code"><pre>require <span class="string"><span class="delimiter">'</span><span class="content">rbconfig</span><span class="delimiter">'</span></span>

<span class="keyword">class</span> <span class="class">Todo</span>
    <span class="keyword">def</span> <span class="function">clear_screen</span>
        host_os = <span class="constant">RbConfig</span>::<span class="constant">CONFIG</span>[<span class="string"><span class="delimiter">'</span><span class="content">host_os</span><span class="delimiter">'</span></span>]

        <span class="keyword">case</span> host_os
            <span class="keyword">when</span> <span class="regexp"><span class="delimiter">/</span><span class="content">mswin|msys|mingw|cygwin|bccwin|wince|emc</span><span class="delimiter">/</span></span>
                system <span class="string"><span class="delimiter">&quot;</span><span class="content">cls</span><span class="delimiter">&quot;</span></span>
            <span class="keyword">when</span> <span class="regexp"><span class="delimiter">/</span><span class="content">darwin|mac os|linux|solaris|bsd</span><span class="delimiter">/</span></span>
                puts <span class="string"><span class="delimiter">&quot;</span><span class="char">\e</span><span class="content">[H</span><span class="char">\e</span><span class="content">[2J</span><span class="delimiter">&quot;</span></span>
        <span class="keyword">end</span>
    <span class="keyword">end</span>

    <span class="keyword">def</span> <span class="function">open_app</span>
        view_all
    <span class="keyword">end</span>

    <span class="keyword">def</span> <span class="function">view_all</span>
        clear_screen

        list_read = read_active_list
        
        puts <span class="string"><span class="delimiter">&quot;</span><span class="content">------INCOMPLETE------</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>
        list_read.each <span class="keyword">do</span> |line|
            puts line
        <span class="keyword">end</span>
        puts <span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">----------------------</span><span class="delimiter">&quot;</span></span>

        choose_action
    <span class="keyword">end</span>

    <span class="keyword">def</span> <span class="function">read_active_list</span>
        list = <span class="constant">File</span>.open(<span class="string"><span class="delimiter">&quot;</span><span class="content">activelist.txt</span><span class="delimiter">&quot;</span></span>,<span class="string"><span class="delimiter">&quot;</span><span class="content">a+</span><span class="delimiter">&quot;</span></span>).readlines
    <span class="keyword">end</span>

    <span class="keyword">def</span> <span class="function">choose_action</span>
        puts <span class="string"><span class="delimiter">%/</span><span class="content">
        What would you like to do with your list?
        1. Add a todo
        2. Mark complete
        3. View incomplete
        4. View completed
        5. Exit</span><span class="delimiter">/</span></span>

        choice = gets.chomp.downcase

        <span class="keyword">case</span> choice
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">1</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> input_todo
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">1.</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> input_todo
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">add</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> input_todo
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">add todo</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> input_todo
        
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">2</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> mark_done
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">2.</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> mark_done
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">mark</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> mark_done
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">mark done</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> mark_done

            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">3</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> view_incomplete
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">3.</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> view_incomplete
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">view incomplete</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> view_incomplete
            
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">4</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> view_complete
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">4.</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> view_complete
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">view completed</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> view_complete

            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">5</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> <span class="keyword">return</span>
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">5.</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> <span class="keyword">return</span>
            <span class="keyword">when</span> <span class="string"><span class="delimiter">&quot;</span><span class="content">exit</span><span class="delimiter">&quot;</span></span> <span class="keyword">then</span> <span class="keyword">return</span>

            <span class="keyword">else</span>
                p <span class="string"><span class="delimiter">&quot;</span><span class="content">Not a valid choice</span><span class="delimiter">&quot;</span></span>
                choose_action
        <span class="keyword">end</span>
    <span class="keyword">end</span>

<span class="comment">#ask for todo</span>
    <span class="keyword">def</span> <span class="function">input_todo</span>
        puts <span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">Enter your new todo:</span><span class="delimiter">&quot;</span></span>
        todo = gets.chomp
        add_todo(todo)
        view_all
    <span class="keyword">end</span>

<span class="comment">#write method</span>
    <span class="keyword">def</span> <span class="function">add_todo</span>(todo)
        <span class="constant">File</span>.open(<span class="string"><span class="delimiter">&quot;</span><span class="content">activelist.txt</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>) { |f| f.write <span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">#{</span>todo<span class="inline-delimiter">}</span></span><span class="char">\n</span><span class="delimiter">&quot;</span></span> }
    <span class="keyword">end</span>

<span class="comment">#mark done method</span>
    <span class="keyword">def</span> <span class="function">mark_done</span>
        clear_screen

        list_read = <span class="constant">File</span>.open(<span class="string"><span class="delimiter">&quot;</span><span class="content">activelist.txt</span><span class="delimiter">&quot;</span></span>,<span class="string"><span class="delimiter">&quot;</span><span class="content">a+</span><span class="delimiter">&quot;</span></span>).readlines

        puts <span class="string"><span class="delimiter">&quot;</span><span class="content">------INCOMPLETE------</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>
        list_read.each_with_index <span class="keyword">do</span> |line, index|
            puts <span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">#{</span>index + <span class="integer">1</span><span class="inline-delimiter">}</span></span><span class="content">. </span><span class="delimiter">&quot;</span></span> + line
        <span class="keyword">end</span>
        puts <span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">----------------------</span><span class="delimiter">&quot;</span></span>

        puts <span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">Which todo do you want to mark complete? (Type the number or zero to cancel).</span><span class="delimiter">&quot;</span></span>
        
        choice = gets.chomp.to_i

        <span class="constant">File</span>.open(<span class="string"><span class="delimiter">&quot;</span><span class="content">activelist.txt</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">w</span><span class="delimiter">&quot;</span></span>) <span class="keyword">do</span> |f|
            list_read.each_with_index <span class="keyword">do</span> |line, index|
                <span class="keyword">if</span> (index + <span class="integer">1</span>) == choice 
                    add_to_complete_list line
                <span class="keyword">else</span>
                    f.write <span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">#{</span>line<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>
                <span class="keyword">end</span>
            <span class="keyword">end</span>
        <span class="keyword">end</span>

        view_all
    <span class="keyword">end</span>

    <span class="keyword">def</span> <span class="function">add_to_complete_list</span> line
        <span class="constant">File</span>.open(<span class="string"><span class="delimiter">&quot;</span><span class="content">completelist.txt</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>).write <span class="string"><span class="delimiter">&quot;</span><span class="inline"><span class="inline-delimiter">#{</span>line<span class="inline-delimiter">}</span></span><span class="delimiter">&quot;</span></span>
    <span class="keyword">end</span>

    <span class="keyword">def</span> <span class="function">view_complete</span>
        clear_screen

        complete_list = <span class="constant">File</span>.open(<span class="string"><span class="delimiter">&quot;</span><span class="content">completelist.txt</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">a+</span><span class="delimiter">&quot;</span></span>).readlines

        puts <span class="string"><span class="delimiter">&quot;</span><span class="content">------COMPLETED------</span><span class="char">\n</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>
        complete_list.each <span class="keyword">do</span> |line|
            puts line
        <span class="keyword">end</span>
        puts <span class="string"><span class="delimiter">&quot;</span><span class="char">\n</span><span class="content">---------------------</span><span class="delimiter">&quot;</span></span>

        choose_action
    <span class="keyword">end</span>

    <span class="keyword">def</span> <span class="function">view_incomplete</span>
        view_all
    <span class="keyword">end</span>
<span class="keyword">end</span>

my_todo_list = <span class="constant">Todo</span>.new

my_todo_list.open_app
</pre></div>
</div>
</div>
]]></content>
  </entry>
  
</feed>
